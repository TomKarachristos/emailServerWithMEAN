In many files a process.env appear(https://nodejs.org/api/process.html#process_process_env), its 
from node and it is an object containing the user environment.
Here a nice explanation: http://thewebivore.com/super-simple-environment-variables-node-js/

config/config.js:
  This is a interface of all others folders in config folder.
  All files that need a info about some env get it from conif.
  config read a NODE_ENV variable to decide if we are in test, develope, or production phase and do the
  appropriate deeps, we give this varable when we run the start command e.g. grunt env:test
  With getGlobbedPaths function we get files by glob pattern. This is used in almast all the variables inside the
  assets folder and thats why all the variables follow the glob pattern. For example:
  config.files.server.models = getGlobbedPaths(assets.server.models);
  so now config.files.server.models have all the files from the path inside in default.js object who gives the server.models.
  and after in mongoose.js in lib we use this code  to get all the models files in mongoodb
  config.files.server.models.forEach(function (modelPath) {
    require(path.resolve(modelPath));
  });
  It does(no with this order): 
    Validate Secure SSL mode can be used
    Validate session secret
    Validate NODE_ENV existence
    Initialize global globbed files(like server and clint( and lib) code )
    Initialize global globbed folders
    Initialize global configuration(like config.meanjs who keep the package.json)
    ++

config/assets/default.js:
  Here we stores all the file paths from files will be use. Have a
  variable clinet and a variable server. Client have: lib,css,less,js,
  views,templates
  and the server have: grundConfig,allJS,models,routes,sockets,
  config,policies,views

config/assets/development.js:
  here will be all the assets who are in developement state only
  have nothing inside.

config/assets/production.js:
  here have the finally assets that will be output in the deploy when
  the site it will be release, dont have many things cause 
  all the files first they monify and union in one file and later
  the out in production.js

config/assets/test.js:
  have all the test, there is three kind of tests:
    clint:
    server:
    e2e: End-to-end testing is a methodology used to test whether 
         the flow of an application is performing as designed from
         start to finish. The purpose of carrying out end-to-end tests
         is to identify system dependencies and 
         to ensure that the right information is passed between various system components and systems.

config/env/default.js:
  here have the info for app like what the name of the app what the description, what
  keywords googleAnalyticsTrackingID and thing like the port, sessionCookie, 
  sessionSecret,sessionKey,sessionCollection,logo,favicon,profileUpload(??)

config/env/development.js and production.js: 
  This two is the almost the same but one is for develop and one for production. A
  different is that in production log options output in a file and had a secure options
  with private key.
  have require('./default')(previus file).

config/lib/app.js:
  here you start the app
